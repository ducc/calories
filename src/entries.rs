use serde::{Deserialize, Serialize, de::{DeserializeOwned, self, Error}, Deserializer};
use serde_json::{Map, Value};

// Generated by https://jsonformatter.org/json-to-rust

#[derive(Serialize, Deserialize, Debug)]
pub struct EntriesResponse {
    #[serde(rename = "alcohol")]
    alcohol: Option<String>,

    #[serde(rename = "settings")]
    settings: Option<Settings>,

    #[serde(rename = "fiveADay")]
    five_a_day: Option<String>,

    #[serde(rename = "water")]
    water: Option<i64>,

    #[serde(rename = "separateTotals")]
    separate_totals: Option<SeparateTotals>,

    #[serde(rename = "combinedTotals")]
    combined_totals: Option<CombinedTotals>,

    #[serde(rename = "accountStatus")]
    account_status: Option<String>,

    #[serde(rename = "entries")]
    entries: Vec<Entry>,

    #[serde(rename = "alcoholCalories")]
    alcohol_calories: Option<String>,

    #[serde(rename = "subTotals")]
    sub_totals: Option<SubTotals>,

    #[serde(rename = "five")]
    five: Option<String>,

    #[serde(rename = "healthKitTotals")]
    health_kit_totals: Option<HealthKitTotals>,

    #[serde(rename = "status")]
    status: Option<Status>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct CombinedTotals {
    #[serde(rename = "goal")]
    goal: Option<FoodClass>,

    #[serde(rename = "left")]
    left: Option<FoodClass>,

    #[serde(rename = "exercise")]
    exercise: Option<FoodClass>,

    #[serde(rename = "food")]
    food: Option<FoodClass>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct FoodClass {
    #[serde(rename = "carbohydrates")]
    carbohydrates: Option<Carbohydrates>,

    #[serde(rename = "kcal")]
    kcal: Option<Carbohydrates>,

    #[serde(rename = "saturatedFat")]
    saturated_fat: Option<Carbohydrates>,

    #[serde(rename = "sodium")]
    sodium: Option<Carbohydrates>,

    #[serde(rename = "salt")]
    salt: Option<Carbohydrates>,

    #[serde(rename = "sugars")]
    sugars: Option<Carbohydrates>,

    #[serde(rename = "protein")]
    protein: Option<Carbohydrates>,

    #[serde(rename = "fat")]
    fat: Option<Carbohydrates>,

    #[serde(rename = "fibre")]
    fibre: Option<Carbohydrates>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Carbohydrates {
    #[serde(rename = "colour")]
    colour: Option<Colour>,

    #[serde(rename = "value")]
    value: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Entry {
    #[serde(rename = "productID")]
    product_id: Option<i64>,

    #[serde(rename = "description")]
    description: Option<String>,

    #[serde(rename = "source")]
    source: Option<Source>,

    #[serde(rename = "isCopyable")]
    is_copyable: Option<bool>,

    #[serde(rename = "timeEaten")]
    time_eaten: Option<String>,

    #[serde(rename = "serving")]
    serving: Option<String>,

    #[serde(rename = "isDeletable")]
    is_deletable: Option<bool>,

    #[serde(rename = "isEditable")]
    is_editable: Option<bool>,

    #[serde(rename = "protein")]
    protein: Option<String>,

    #[serde(rename = "imageUrl")]
    image_url: Option<String>,

    #[serde(rename = "fat")]
    fat: Option<String>,

    #[serde(rename = "id")]
    id: Option<i64>,

    #[serde(rename = "isFavourite")]
    is_favourite: Option<bool>,

    #[serde(rename = "servingSize")]
    serving_size: Option<ServingSize>,

    #[serde(rename = "carbohydrates")]
    carbohydrates: Option<String>,

    #[serde(rename = "alcohol")]
    alcohol: Option<String>,

    #[serde(rename = "isFavoritable")]
    is_favoritable: Option<bool>,

    #[serde(rename = "image")]
    image: Option<Image>,

    #[serde(rename = "fiveADay")]
    five_a_day: Option<f64>,

    #[serde(rename = "sugars")]
    sugars: Option<String>,

    #[serde(rename = "salt")]
    salt: Option<String>,

    #[serde(rename = "isExercise")]
    is_exercise: Option<bool>,

    #[serde(rename = "saturatedFat")]
    saturated_fat: Option<String>,

    #[serde(rename = "sodium")]
    sodium: Option<String>,

    #[serde(rename = "kcal")]
    kcal: Option<String>,

    #[serde(rename = "occasionTag")]
    occasion_tag: Option<String>,

    #[serde(rename = "fibre")]
    fibre: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Image {
    #[serde(rename = "imageUrlLarge")]
    image_url_large: Option<String>,

    #[serde(rename = "imageUrl")]
    image_url: Option<String>,

    #[serde(rename = "imageUrlSmall")]
    image_url_small: Option<String>,

    #[serde(rename = "imageUrlSmallCropped")]
    image_url_small_cropped: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct ServingSize {
    #[serde(rename = "measure")]
    measure: Option<Measure>,

    #[serde(rename = "size")]
    size: Option<f64>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct HealthKitTotals {
    #[serde(rename = "carbohydrates")]
    carbohydrates: Option<String>,

    #[serde(rename = "kcal")]
    kcal: Option<String>,

    #[serde(rename = "saturatedFat")]
    saturated_fat: Option<String>,

    #[serde(rename = "sodium")]
    sodium: Option<String>,

    #[serde(rename = "sugars")]
    sugars: Option<String>,

    #[serde(rename = "salt")]
    salt: Option<String>,

    #[serde(rename = "protein")]
    protein: Option<String>,

    #[serde(rename = "kcalsBurnt")]
    kcals_burnt: Option<String>,

    #[serde(rename = "fat")]
    fat: Option<String>,

    #[serde(rename = "fibre")]
    fibre: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct SeparateTotals {
    #[serde(rename = "exercise")]
    exercise: Option<SeparateTotalsExercise>,

    #[serde(rename = "food")]
    food: Option<Food>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct SeparateTotalsExercise {
    #[serde(rename = "added")]
    added: Option<Added>,

    #[serde(rename = "left")]
    left: Option<Added>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Added {
    #[serde(rename = "kcal")]
    kcal: Option<Carbohydrates>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Food {
    #[serde(rename = "added")]
    added: Option<FoodClass>,

    #[serde(rename = "left")]
    left: FoodClass,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Settings {
    #[serde(rename = "tabletLandscapeDiaryTrackers")]
    tablet_landscape_diary_trackers: Option<String>,

    #[serde(rename = "offers")]
    offers: Vec<Option<serde_json::Value>>,

    #[serde(rename = "occasionTags")]
    occasion_tags: Vec<OccasionTag>,

    #[serde(rename = "desktopColumns")]
    desktop_columns: Option<String>,

    #[serde(rename = "showOccasionView")]
    show_occasion_view: Option<bool>,

    #[serde(rename = "phoneLandscapeColumns")]
    phone_landscape_columns: Option<String>,

    #[serde(rename = "phonePortraitColumns")]
    phone_portrait_columns: Option<String>,

    #[serde(rename = "phonePortraitMultiColumns")]
    phone_portrait_multi_columns: Option<String>,

    #[serde(rename = "tabletLandscapeColumns")]
    tablet_landscape_columns: Option<String>,

    #[serde(rename = "tabletPortraitColumns")]
    tablet_portrait_columns: Option<String>,

    #[serde(rename = "tabletPortraitDiaryTrackers")]
    tablet_portrait_diary_trackers: Option<String>,

    #[serde(rename = "contactable")]
    contactable: Option<Contactable>,

    #[serde(rename = "weeklyViewStartDay")]
    weekly_view_start_day: Option<i64>,

    #[serde(rename = "foodDatabase")]
    food_database: Option<String>,

    #[serde(rename = "phonePortraitDiaryTrackers")]
    phone_portrait_diary_trackers: Option<String>,

    #[serde(rename = "hasLinkedUserAccounts")]
    has_linked_user_accounts: Option<bool>,

    #[serde(rename = "viewStyle")]
    view_style: Option<String>,

    #[serde(rename = "linkedAccounts")]
    linked_accounts: Vec<String>,

    #[serde(rename = "messages")]
    messages: Vec<Message>,

    #[serde(rename = "currentDietaryProfile")]
    current_dietary_profile: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Contactable {
    #[serde(rename = "offers")]
    offers: Option<bool>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Message {
    #[serde(rename = "buttons")]
    buttons: Option<String>,

    #[serde(rename = "imageUrl")]
    image_url: Option<String>,

    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "title")]
    title: Option<String>,

    #[serde(rename = "body")]
    body: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct OccasionTag {
    #[serde(rename = "name")]
    name: Option<String>,

    #[serde(rename = "iconGuid")]
    icon_guid: Option<String>,

    #[serde(rename = "enabled")]
    enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Status {
    #[serde(rename = "accountStatus")]
    account_status: Option<String>,

    #[serde(rename = "accountStatusEnum")]
    account_status_enum: Option<String>,

    #[serde(rename = "dateExpiry")]
    date_expiry: Option<String>,

    #[serde(rename = "dateRegistration")]
    date_registration: Option<String>,

    #[serde(rename = "dateSinceLastUse")]
    date_since_last_use: Option<String>,

    #[serde(rename = "daysSinceLastUse")]
    days_since_last_use: Option<i64>,

    #[serde(rename = "debugIdentifier")]
    debug_identifier: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct SubTotals {
    #[serde(rename = "Breakfast")]
    breakfast: Option<HealthKitTotals>,

    #[serde(rename = "Brunch")]
    brunch: Option<HealthKitTotals>,

    #[serde(rename = "Dinner")]
    dinner: Option<HealthKitTotals>,

    #[serde(rename = "Snacks")]
    snacks: Option<HealthKitTotals>,

    #[serde(rename = "exercise")]
    exercise: Option<SubTotalsExercise>,

    #[serde(rename = "Drinks")]
    drinks: Option<HealthKitTotals>,

    #[serde(rename = "Lunch")]
    lunch: Option<HealthKitTotals>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct SubTotalsExercise {
    #[serde(rename = "kcal")]
    kcal: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Colour {
    #[serde(rename = "#a1a1a1")]
    A1A1A1,

    #[serde(rename = "#da0716")]
    Da0716,

    #[serde(rename = "#f77b00")]
    F77B00,

    #[serde(rename = "#1791b5")]
    The1791B5,

    #[serde(rename = "#73c01a")]
    The73C01A,

    #[serde(rename = "#933fb7")]
    The933Fb7,

    #[serde(rename = "#989898")]
    The989898,
}

#[derive(Serialize, Debug)]
pub enum Measure {
    G,
    Kg,
    Ml,
    UsFl,
    L,
    Cl,
}

impl<'de> Deserialize<'de> for Measure {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where D: Deserializer<'de>
    {
        let s = String::deserialize(deserializer)?;
        let s = s.to_lowercase();
        let s2 = s.as_str();
        Ok(match s2 {
            "g" => Measure::G,
            "kg" => Measure::Kg,
            "ml" => Measure::Ml,
            "us fl" | "usfl" => Measure::UsFl,
            "l" => Measure::L,
            "cl" => Measure::Cl,
            _ => return Err(D::Error::custom(format!("unhandled variant: {}", s2))),
        })
    }
}

#[derive(Serialize, Deserialize, Debug)]
pub enum Source {
    #[serde(rename = "nutracheck")]
    Nutracheck,
}
